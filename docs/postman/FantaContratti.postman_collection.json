{
  "info": {
    "name": "FantaContratti API",
    "description": "Collection completa delle API della piattaforma FantaContratti",
    "version": "1.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{accessToken}}",
        "type": "string"
      }
    ]
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000",
      "type": "string"
    },
    {
      "key": "accessToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "refreshToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "userId",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Register User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"mario.rossi@example.com\",\n  \"username\": \"mariorossi\",\n  \"password\": \"SecurePass123!\",\n  \"firstName\": \"Mario\",\n  \"lastName\": \"Rossi\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "register"]
            }
          },
          "response": []
        },
        {
          "name": "Login User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const responseJson = pm.response.json();",
                  "    pm.collectionVariables.set('accessToken', responseJson.data.tokens.accessToken);",
                  "    pm.collectionVariables.set('refreshToken', responseJson.data.tokens.refreshToken);",
                  "    pm.collectionVariables.set('userId', responseJson.data.user.id);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"admin@fantacontratti.com\",\n  \"password\": \"admin123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "login"]
            }
          },
          "response": []
        },
        {
          "name": "Refresh Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const responseJson = pm.response.json();",
                  "    pm.collectionVariables.set('accessToken', responseJson.data.accessToken);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refreshToken\": \"{{refreshToken}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/refresh",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "refresh"]
            }
          },
          "response": []
        },
        {
          "name": "Logout",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/auth/logout",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "logout"]
            }
          },
          "response": []
        },
        {
          "name": "Forgot Password",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"mario.rossi@example.com\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/forgot-password",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "forgot-password"]
            }
          },
          "response": []
        },
        {
          "name": "Reset Password",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"token\": \"reset-token-here\",\n  \"newPassword\": \"NewSecurePass123!\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/reset-password",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "reset-password"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "User Management",
      "item": [
        {
          "name": "Get All Users",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/users?page=1&limit=10",
              "host": ["{{baseUrl}}"],
              "path": ["api", "users"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                },
                {
                  "key": "search",
                  "value": "",
                  "disabled": true
                },
                {
                  "key": "role",
                  "value": "",
                  "disabled": true
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get User by ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/users/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "users", "{{userId}}"]
            }
          },
          "response": []
        },
        {
          "name": "Update User",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"Mario Updated\",\n  \"lastName\": \"Rossi Updated\",\n  \"phone\": \"+39 123 456 7890\",\n  \"dateOfBirth\": \"1990-01-01\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/users/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "users", "{{userId}}"]
            }
          },
          "response": []
        },
        {
          "name": "Delete User",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/users/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "users", "{{userId}}"]
            }
          },
          "response": []
        },
        {
          "name": "Get Current User Profile",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/users/profile",
              "host": ["{{baseUrl}}"],
              "path": ["api", "users", "profile"]
            }
          },
          "response": []
        },
        {
          "name": "Update User Profile",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"Mario\",\n  \"lastName\": \"Rossi\",\n  \"profile\": {\n    \"bio\": \"Appassionato di fantasy football e sviluppo software\",\n    \"website\": \"https://marioblog.com\",\n    \"location\": \"Milano, Italy\",\n    \"preferences\": {\n      \"theme\": \"dark\",\n      \"notifications\": true,\n      \"language\": \"it\"\n    }\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/users/profile",
              "host": ["{{baseUrl}}"],
              "path": ["api", "users", "profile"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Contracts (Template)",
      "item": [
        {
          "name": "Get All Contracts",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/contracts?status=active&page=1&limit=10",
              "host": ["{{baseUrl}}"],
              "path": ["api", "contracts"],
              "query": [
                {
                  "key": "status",
                  "value": "active"
                },
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Create Contract",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Contratto Serie A 2024\",\n  \"description\": \"Contratto per il campionato di Serie A 2024-2025\",\n  \"rules\": {\n    \"budget\": 100000000,\n    \"maxPlayers\": 25,\n    \"formation\": \"3-5-2\"\n  },\n  \"startDate\": \"2024-08-01\",\n  \"endDate\": \"2025-05-31\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/contracts",
              "host": ["{{baseUrl}}"],
              "path": ["api", "contracts"]
            }
          },
          "response": []
        },
        {
          "name": "Get Contract by ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/contracts/1",
              "host": ["{{baseUrl}}"],
              "path": ["api", "contracts", "1"]
            }
          },
          "response": []
        },
        {
          "name": "Update Contract",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Contratto Serie A 2024 - Updated\",\n  \"description\": \"Contratto aggiornato per il campionato di Serie A 2024-2025\",\n  \"status\": \"active\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/contracts/1",
              "host": ["{{baseUrl}}"],
              "path": ["api", "contracts", "1"]
            }
          },
          "response": []
        },
        {
          "name": "Delete Contract",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/contracts/1",
              "host": ["{{baseUrl}}"],
              "path": ["api", "contracts", "1"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Notifications (Template)",
      "item": [
        {
          "name": "Get User Notifications",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/notifications?unread=true&page=1&limit=10",
              "host": ["{{baseUrl}}"],
              "path": ["api", "notifications"],
              "query": [
                {
                  "key": "unread",
                  "value": "true"
                },
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Create Notification",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Benvenuto su FantaContratti!\",\n  \"message\": \"La tua registrazione è stata completata con successo.\",\n  \"type\": \"welcome\",\n  \"priority\": \"normal\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/notifications",
              "host": ["{{baseUrl}}"],
              "path": ["api", "notifications"]
            }
          },
          "response": []
        },
        {
          "name": "Mark Notification as Read",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/notifications/1/read",
              "host": ["{{baseUrl}}"],
              "path": ["api", "notifications", "1", "read"]
            }
          },
          "response": []
        },
        {
          "name": "Mark All Notifications as Read",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/notifications/read-all",
              "host": ["{{baseUrl}}"],
              "path": ["api", "notifications", "read-all"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Health & System",
      "item": [
        {
          "name": "API Gateway Health",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/health",
              "host": ["{{baseUrl}}"],
              "path": ["health"]
            }
          },
          "response": []
        },
        {
          "name": "User Service Health",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://localhost:3001/health",
              "protocol": "http",
              "host": ["localhost"],
              "port": "3001",
              "path": ["health"]
            }
          },
          "response": []
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Auto-refresh token se necessario",
          "const accessToken = pm.collectionVariables.get('accessToken');",
          "const refreshToken = pm.collectionVariables.get('refreshToken');",
          "",
          "if (accessToken && refreshToken) {",
          "    // Decodifica JWT per controllare scadenza",
          "    try {",
          "        const payload = JSON.parse(atob(accessToken.split('.')[1]));",
          "        const exp = payload.exp * 1000; // Convert to milliseconds",
          "        const now = Date.now();",
          "        const timeToExpiry = exp - now;",
          "        ",
          "        // Se il token scade in meno di 5 minuti, rinnovalo",
          "        if (timeToExpiry < 300000) {",
          "            pm.sendRequest({",
          "                url: pm.collectionVariables.get('baseUrl') + '/api/auth/refresh',",
          "                method: 'POST',",
          "                header: {",
          "                    'Content-Type': 'application/json'",
          "                },",
          "                body: {",
          "                    mode: 'raw',",
          "                    raw: JSON.stringify({",
          "                        refreshToken: refreshToken",
          "                    })",
          "                }",
          "            }, function (err, response) {",
          "                if (!err && response.code === 200) {",
          "                    const responseJson = response.json();",
          "                    pm.collectionVariables.set('accessToken', responseJson.data.accessToken);",
          "                }",
          "            });",
          "        }",
          "    } catch (e) {",
          "        console.log('Error parsing JWT token:', e);",
          "    }",
          "}"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Test globali per tutte le richieste",
          "pm.test('Response time is less than 5000ms', function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(5000);",
          "});",
          "",
          "pm.test('Response has correct Content-Type', function () {",
          "    if (pm.response.code !== 204) {",
          "        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
          "    }",
          "});",
          "",
          "if (pm.response.code >= 400) {",
          "    pm.test('Error response has correct structure', function () {",
          "        const responseJson = pm.response.json();",
          "        pm.expect(responseJson).to.have.property('success', false);",
          "        pm.expect(responseJson).to.have.property('error');",
          "        pm.expect(responseJson.error).to.have.property('message');",
          "        pm.expect(responseJson.error).to.have.property('status');",
          "    });",
          "} else if (pm.response.code !== 204) {",
          "    pm.test('Success response has correct structure', function () {",
          "        const responseJson = pm.response.json();",
          "        pm.expect(responseJson).to.have.property('success', true);",
          "    });",
          "}"
        ]
      }
    }
  ]
}